#set working directory to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the CG input data:
load(file ="input/CG_input_data.RData")
View(CG_input_Baseline)
# clear directory
rm(list=ls())
#set working directory to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/raw/")
#reorder columns - Subject Variablen zuerst
D <- D[,c(18,17,16, 1:15)]
#jetzt trennen wir den Datensatz nach Adapt und Baseline:
Baseline <- D[,-c(12:18)] %>% filter(V1 == "Baseline")
#und richtig benennen:
names(Baseline) <- c("Subject", "Date", "Experiment","Block", "Duration", "SpID", "Word", "tML", "SpSex", "Resp","RT" )
view(Baseline)
#(1) Wieviele Stimuli werden pro Proband gezogen:
table(Baseline$Subject) # 112 sollte passen, oder? #ja, passt
# dazu m?ssen wir erstmal eine Variable erstellen, die uns den Stimulus kodiert:
Baseline$Stimulus <- str_c(Baseline$SpID, Baseline$Word, Baseline$tML, sep = "_")
table(Baseline$Stimulus, Baseline$Subject) # nicht die eleganteste L?sung, aber zeigt dass jeder Stimulus bei jedem probanden genau einmal gezogen wird. Passt
CG_input_Baseline <- mySummary(Baseline, Resp, Subject, SpSex, tML)
View(CG_input_Baseline)
class(Baseline$Resp)
##########################################################################
## File: 01_data_preparation.R
## Data Preparatation for Emotion-Adaptation-Experiment in Voices, BA Berges
# author: Christine Nussbaum/Dorothea Berges
# date 02/2022, revised 05/2024
# clear directory
rm(list=ls())
#set working directory to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/raw/")
#reorder columns - Subject Variablen zuerst
D <- D[,c(18,17,16, 1:15)]
View(D)
D$V7 <- as.numeric(D$V7) # code the Response as numeric
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/raw/")
#reorder columns - Subject Variablen zuerst
D <- D[,c(18,17,16, 1:15)]
View(D)
#jetzt trennen wir den Datensatz nach Adapt und Baseline:
Baseline <- D[,-c(12:18)] %>% filter(V1 == "Baseline")
#und richtig benennen:
names(Baseline) <- c("Subject", "Date", "Experiment","Block", "Duration", "SpID", "Word", "tML", "SpSex", "Resp","RT" )
View(Baseline)
Baseline$Resp <- as.numeric(Baseline$Resp)
#(1) Wieviele Stimuli werden pro Proband gezogen:
table(Baseline$Subject) # 112 sollte passen, oder? #ja, passt
# dazu m?ssen wir erstmal eine Variable erstellen, die uns den Stimulus kodiert:
Baseline$Stimulus <- str_c(Baseline$SpID, Baseline$Word, Baseline$tML, sep = "_")
table(Baseline$Stimulus, Baseline$Subject) # nicht die eleganteste L?sung, aber zeigt dass jeder Stimulus bei jedem probanden genau einmal gezogen wird. Passt
CG_input_Baseline <- mySummary(Baseline, Resp, Subject, SpSex, tML)
View(CG_input_Baseline)
Adapt <- D %>% filter(V1 == "Antwort")
# name variable
names(Adapt) <- c("Subject", "Date", "Experiment", "Block", "Duration", "SpID", "Word", "tML", "SpSex","TopUp", "y", "z", "TopupM", "TopupF", "Resp", "RT", "AdaptType", "Blockorder" )
view(Adapt)
# soo.. na da schauen wir mal... wir gucken erstmal wieder, ob alles da ist:
Adapt$Resp <- as.numeric(Adapt$Resp)
#(1) Wieviele Stimuli werden pro Proband gezogen:
table(Adapt$Subject) # zweimal 112
# dazu m?ssen wir erstmal eine Variable erstellen, die uns den Stimulus kodiert:
Adapt$Stimulus <- str_c(Adapt$SpID, Adapt$Word, Adapt$tML, sep = "_")
table(Adapt$Stimulus, Adapt$Subject) # passt
# jetzt schauen wir uns dieses ganze Variablen-Chaos mal noch bisschen an:
# erstmal aufr?umen:
Adapt$y <- ifelse(Adapt$TopUp != 0, NA, Adapt$y)
Adapt$z <- ifelse(Adapt$TopUp != 0, NA, Adapt$z)
Adapt$TopupM <- ifelse(Adapt$TopUp != 0, NA, Adapt$TopupM)
Adapt$TopupF <- ifelse(Adapt$TopUp != 0, NA, Adapt$TopupF)
Adapt$TopUp <- ifelse(Adapt$TopUp == 0, "Yes", NA) # so, jetzt kann man hier auch was erkennen
view(Adapt)
# jetzt speichern wir die beiden Datens?tze erstmal ab:
save(Baseline, Adapt, file ="input/raw_data.RData")
# aggregieren f?r die CG-Analyse
Adapt$Resp <- Adapt$Resp -1 # umkodieren
CG_input <- mySummary(Adapt, Resp, Subject, AdaptType, SpSex, tML) # Input f?r jeden Probanden einzeln
CG_agg_input <- mySummary(CG_input, Resp, AdaptType, SpSex, tML) # input ?ber alle Probanden gemittelt
save(CG_input, CG_agg_input, CG_input_Baseline, file ="input/CG_input_data.RData")
# clear directory
rm(list=ls())
#set working directory to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the CG input data:
load(file ="input/CG_input_data.RData")
View(CG_input_Baseline)
View(CG_agg_input)
#TINE: die einfachste Variante ist es, die Faktoren direkt nochmal umzubenennen:
CG_agg_input$SpSex <- recode(CG_agg_input$SpSex , m = "m?nnlich", f = "weiblich")
#Beschriftung
yTitleStr = "Anteil der w?tend-Antworten"
xTitleStr = "Morphlevel"
facetStr =  "splitted per SpSex and AdaptType"
title = paste0("Mean ", yTitleStr, " per ", xTitleStr, facetStr, " (N = 12)")
filename = paste0("plots/01_CG_rough_plots.png")
#Plot
p<-(ggplot(data= CG_agg_input, aes(x = tML, y=Resp, color = SpSex, group=SpSex)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = (Resp-CI), ymax = (Resp+CI)), width = 0.1 ) +
labs(x = xTitleStr , y = yTitleStr, color = "Sprechergeschlecht") +       #TINE: hier habe ich auch was angepasst
facet_wrap(~ AdaptType, ncol = 2) +
geom_hline(yintercept = 0.5, linetype = 4) + theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text=element_text(size=14),
axis.title=element_text(size=14),
axis.text.x = element_text(color = "black", size = 14), # angle = 45, hjust = 1.2, vjust =  1.2
axis.text.y = element_text(color = "black", size = 14),
strip.text.x = element_text(size = 14)) +
scale_y_continuous(limits=c(0,1.0), breaks = c( 0.0, 0.2, 0.4, 0.6, 0.8, 1.0)))
#abspeichern
ggsave(filename, width = 12, height = 4, dpi =300)
#aufr?umen
remove(yTitleStr, xTitleStr, facetStr, title, filename, p)
##########################################################################
## File: 02_data_visualization.R
## Data Preparatation for Emotion-Adaptation-Experiment in Voices, BA Berges
# author: Christine Nussbaum und Dorothea Berges
# date 02/2022, revised 05/2024
# clear directory
rm(list=ls())
#set working directory to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the CG input data:
load(file ="input/CG_input_data.RData")
#-------------------------------------------------------------------------------
# plot average data
# DORO: ich habe die Beschriftungen angepasst, weil meine BA ja auch deutsch ist
#ist noch nicht perfekt, gerade bei der Beschriftung f?rs Geschlecht h?nge ich etwas, wo ich das anpassen kann
#TINE: die einfachste Variante ist es, die Faktoren direkt nochmal umzubenennen:
CG_agg_input$SpSex <- recode(CG_agg_input$SpSex , m = "m?nnlich", f = "weiblich")
#TINE: das gleiche kannst du ggf auch f?r AdaptType machen
#Beschriftung
yTitleStr = "Anteil der w?tend-Antworten"
xTitleStr = "Morphlevel"
facetStr =  "splitted per SpSex and AdaptType"
title = paste0("Mean ", yTitleStr, " per ", xTitleStr, facetStr, " (N = 12)")
filename = paste0("plots/01_CG_rough_plots.png")
#Plot
p<-(ggplot(data= CG_agg_input, aes(x = tML, y=Resp, color = SpSex, group=SpSex)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = (Resp-CI), ymax = (Resp+CI)), width = 0.1 ) +
labs(x = xTitleStr , y = yTitleStr, color = "Sprechergeschlecht") +       #TINE: hier habe ich auch was angepasst
facet_wrap(~ AdaptType, ncol = 2) +
geom_hline(yintercept = 0.5, linetype = 4) + theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text=element_text(size=14),
axis.title=element_text(size=14),
axis.text.x = element_text(color = "black", size = 14), # angle = 45, hjust = 1.2, vjust =  1.2
axis.text.y = element_text(color = "black", size = 14),
strip.text.x = element_text(size = 14)) +
scale_y_continuous(limits=c(0,1.0), breaks = c( 0.0, 0.2, 0.4, 0.6, 0.8, 1.0)))
#abspeichern
ggsave(filename, width = 12, height = 4, dpi =300)
#aufr?umen
remove(yTitleStr, xTitleStr, facetStr, title, filename, p)
# clear directory
rm(list=ls())
#set working directory to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
library("ez")
library("effectsize")
#library("ggplot2")
# load relevant functions
source("functions/mySummary.R")
source("functions/fitCumulativeGaussian.R")
source("functions/tracedEzOut.R")
load(file ="input/CG_input_data.RData")
##################################################################
## declare tML as numerical variable
CG_input$tML <- as.numeric(as.character(CG_input$tML))
#Fit a Cumulative Gaussian Function (CG) for each Subject x SpSex * AdaptType
CGdata <- myCGfit(CG_input, x = unique(CG_input$tML), Resp, Subject, AdaptType, SpSex)
### There were 50 warnings -> this happens when the algorithm tried to fit numbers that create a NaN in the pnorm()-command
warnings()
view(CGdata)
view(CGdata)
##################################################################
## plot values of the fits to identify outlier
summary(CGdata[,4:6]) # yep... some fits went wrong
#PSE - point of subjective equality
dotchart(CGdata$PSE)
hist(CGdata$PSE)
boxplot(CGdata$PSE)
#R2 - fit of the function
dotchart(CGdata$R2)
hist(CGdata$R2)
boxplot(CGdata$R2)
# inspect subjects that have a PSE > 80 and a R2 < 70
badFitR2 <- CGdata %>% filter(R2 < 0.7)
badFitPSE <- CGdata %>% filter(PSE > 80 | PSE < 20)
badFit <- rbind(badFitR2, badFitPSE)
unique(badFit$Subject) # 4 Subjects have bad fits and should be excluded in a second analysis
rm(badFitR2, badFitPSE)
###remove participants with bad fit
#TINE: ich w?rde die tats?chlich generell rausnehmen. Dann hast du noch 36, das sind immernoch genug und die Daten sind sauberer.
CGdata <- CGdata %>% filter(!(Subject %in% badFit$Subject))
# now check again PSE values and R2
dotchart(CGdata$PSE) # all beautiful
dotchart(CGdata$R2)  # very nice
##ich mache hier nochmal einen neuen CG_agg_input, weil jetzt ja nur noch 36 Probanden drin sind. Da ist N = 36#
CG_input <- CG_input %>% filter(!(Subject %in% badFit$Subject))
CG_agg_input <- mySummary(CG_input, Resp, AdaptType, SpSex, tML) # input ?ber alle Probanden gemittelt
#Zuerst: wir sagen R wieder, dass tML numerisch ist!
CG_agg_input$tML <- as.numeric(as.character(CG_agg_input$tML))
#Sch?tzung f?r jeden Probanden
CGagg <- myCGfit(CG_agg_input, x = unique(CG_agg_input$tML), Resp, AdaptType, SpSex)
#TINE: ich hab hier mal nen Plot gemacht, kannst du dann einfach noch ?bersetzen bzw anpassen
xTitleStr = 'test voice morph level (Prop. of "angry" in the voice)'
yTitleStr = 'Prop. of "angry" responses'
filename = "plots/CG-tML x AdaptType x SpSex.png"
title = "Cumulative Fits: Emotion AE per adaptor modality - Final data (N = 36)"
# Data sampling: (TINE: das ist der recht komplizierte Teil. Schau da einfach nochmal ins Video, das ist einfach schon sehr komplex)
plot_data <-
pmap_df(CGagg[,1:4],
function(AdaptType, SpSex, PSE, SD) {
tibble(AdaptType = AdaptType,
SpSex = SpSex,
x = seq(20, 80, by = 1),
y = pnorm(x, PSE, SD))
})
p<-(ggplot(CG_agg_input, aes(x=tML, y=Resp, colour=SpSex)) +
geom_errorbar(aes(ymin=Resp-SE, ymax=Resp+SE), width=2) +
geom_point(mapping = aes(colour = SpSex, shape = SpSex) ) +
labs(x = xTitleStr , y = yTitleStr) +
scale_colour_manual(values=c("red", "darkgreen")) +
scale_linetype_manual(values=c("solid", "dotdash"))+
scale_size_manual(values=c(2,2)) +
scale_shape_manual(values=c(19, 15))+
scale_y_continuous(limits=c(0,1), breaks = c( 0.0, 0.2, 0.4, 0.6, 0.8, 1.0))  +
facet_wrap(~AdaptType)+
ggtitle(title))+
geom_line(data = plot_data, aes(colour = SpSex, x = x, y = y)) +
geom_hline(yintercept = 0.5, lty = 2)
ggsave(filename, width = 12, height = 4, dpi =300)
remove(p, xTitleStr, yTitleStr, filename, title, plot_data)
#CG_input <- mySummary(Adapt, Resp, Subject, AdaptType, SpSex, tML) # Input f?r jeden Probanden einzeln
#view(CG_input)
xTitleStr = 'Morphlevel'
yTitleStr = 'Anteil von w?tend-Antworten'
#filename = "imgs/BAProbandenEinzeln.png"  #TINE: du brauchst den richtigen Unterordner, der hei?t bei dir "plots"
filename = "plots/BAProbandenEinzeln.png"
title = "Einfluss des Geschlechtes auf die Adaptation von Emotionen "
plot_data <-
pmap_df(CGdata[,1:5],
function(AdaptType,SpSex, Subject, PSE, SD) {
tibble(AdaptType = AdaptType,
SpSex = SpSex,
Subject = Subject,
x = seq(20, 80, by = 1),
y = pnorm(x, PSE, SD))
})
p<-(ggplot(CG_input, aes(x=tML, y=Resp, colour=SpSex)) +
geom_errorbar(aes(ymin=Resp-SE, ymax=Resp+SE), width=2) +
geom_point(mapping = aes(colour = SpSex, shape = SpSex) ) +
labs(x = xTitleStr , y = yTitleStr) +
scale_colour_manual(values=c("red", "darkgreen")) +
scale_linetype_manual(values=c("solid", "dotdash"))+
scale_size_manual(values=c(2,2)) +
scale_shape_manual(values=c(19, 15))+
scale_y_continuous(limits=c(0,1), breaks = c( 0.0, 0.2, 0.4, 0.6, 0.8, 1.0))  +
facet_wrap(~Subject + AdaptType, ncol = 10)+
theme(legend.position="none") +
ggtitle(title)) +
geom_line(data = plot_data, aes(colour = SpSex, x = x, y = y)) +
geom_hline(yintercept = 0.5, lty = 2)
ggsave(filename, width = 16, height = 12, dpi =300)
remove(p, xTitleStr, yTitleStr, filename, title, plot_data)
a<-ezANOVA(data=CGdata, dv=.(PSE), wid=.(Subject), within = .(AdaptType, SpSex), type=3, detailed = TRUE)
b = tracedEzOut(a, print = TRUE, sph.cor = "HF", mau.p = 0.05, etasq = "partial", dfsep = ", ")
capture.output(b, file= "output/ANOVAI.txt")
ezPlot(data=CGdata, dv=.(PSE), wid=.(Subject), within = .(AdaptType, SpSex), x=SpSex, split=AdaptType)
PH1 <- CGdata %>% group_by(Subject, AdaptType) %>% summarise(PSE = mean(PSE))
# clear directory
rm(list=ls())
#set working directory to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/raw/")
#number of participants
print(paste("There are currently", length(unique(D$V1)), "participants loaded."))
View(D)
#number of participants
print(paste("There are currently", length(unique(D$Subject)), "participants loaded."))
# clear directory
rm(list=ls())
#set working directory to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/raw/")
#number of participants
print(paste("There are currently", length(unique(D$Subject)), "participants loaded."))
#reorder columns - Subject Variablen zuerst
D <- D[,c(18,17,16, 1:15)]
E1_BL <- D[,-c(12:18)] %>% filter(V1 == "Baseline")
View(D)
View(E1_BL)
E1_Adapt <- D %>% filter(V1 == "Antwort")
View(E1_BL)
View(E1_BL)
View(D)
#[2] Rename Variables
names(E1_BL) <- c("Participant", "Date", "Experiment","Block", "Duration", "SpID", "Word", "tML", "SpSex", "Resp","RT" )
View(E1_BL)
class(E1_BL$Resp)
#---------------------------------------------------------------------------------
#Check if everything is loaded correctly
#(1) N different stimuli per participant
table(E1_BL$Participant) # 112 sollte passen, oder? #ja, passt
#code a stimulus variable
E1_Bline$Stimulus <- str_c(E1_Bline$SpID, E1_Bline$Word, E1_Bline$tML, sep = "_")
#[1] Split the data in the Baseline and the Adaptation-Block
E1_Bline <- D[,-c(12:18)] %>% filter(V1 == "E1_Bline")
E1_Adapt <- D %>% filter(V1 == "Antwort")
#[2] Rename Variables
names(E1_Bline) <- c("Participant", "Date", "Experiment","Block", "Duration", "SpID", "Word", "tML", "SpSex", "Resp","RT" )
#[3] Adjust some settings of variables
E1_Bline$Resp <- as.numeric(E1_Bline$Resp)
#[1] N different stimuli per participant
table(E1_Bline$Participant) #should be 112 per participant
##########################################################################
## File: 01_Exp1_data_preparation.R
## Data Preparatation for Exp 1: Adaptation of Emotion - male/female voices
# author: Christine Nussbaum/Dorothea Berges
# date 05/2024
# clear directory
rm(list=ls())
#set working directory to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/raw/")
#number of participants
print(paste("There are currently", length(unique(D$Subject)), "participants loaded."))
#reorder columns - Subject Variablen zuerst
D <- D[,c(18,17,16, 1:15)]
E1_Bline <- D[,-c(12:18)] %>% filter(V1 == "Baseline")
E1_Adapt <- D %>% filter(V1 == "Antwort")
#[2] Rename Variables
names(E1_Bline) <- c("Participant", "Date", "Experiment","Block", "Duration", "SpID", "Word", "tML", "SpSex", "Resp","RT" )
#[3] Adjust some settings of variables
E1_Bline$Resp <- as.numeric(E1_Bline$Resp)
#[1] N different stimuli per participant
table(E1_Bline$Participant) #should be 112 per participant
#code a stimulus variable
E1_Bline$Stimulus <- str_c(E1_Bline$SpID, E1_Bline$Word, E1_Bline$tML, sep = "_")
table(E1_Bline$Stimulus, E1_Bline$Subject) # nicht die eleganteste L?sung, aber zeigt dass jeder Stimulus bei jedem probanden genau einmal gezogen wird. Passt
#code a stimulus variable
E1_Bline$Stimulus <- str_c(E1_Bline$SpID, E1_Bline$Word, E1_Bline$tML, sep = "_")
View(E1_Bline)
table(E1_Bline$Stimulus, E1_Bline$Participant) # nicht die eleganteste L?sung, aber zeigt dass jeder Stimulus bei jedem probanden genau einmal gezogen wird. Passt
table(table(E1_Bline$Stimulus, E1_Bline$Participant)) # nicht die eleganteste L?sung, aber zeigt dass jeder Stimulus bei jedem probanden genau einmal gezogen wird. Passt
names(E1_Adapt) <- c("Subject", "Date", "Experiment", "Block", "Duration", "SpID", "Word", "tML", "SpSex","TopUp", "y", "z", "TopupM", "TopupF", "Resp", "RT", "AdaptType", "Blockorder" )
View(E1_Adapt)
table(E1_Adapt$Subject) # zweimal 112
#[3]Is every stimulus picked exactly twice? - Adaptation
E1_Adapt$Stimulus <- str_c(E1_Adapt$SpID, E1_Adapt$Word, E1_Adapt$tML, sep = "_")
table(E1_Adapt$Stimulus, E1_Adapt$Participant) # pass
names(E1_Adapt) <- c("Participant", "Date", "Experiment", "Block", "Duration", "SpID", "Word", "tML", "SpSex","TopUp", "y", "z", "TopupM", "TopupF", "Resp", "RT", "AdaptType", "Blockorder" )
table(table(E1_Adapt$Stimulus, E1_Adapt$Participant)) # pass
#[1] Split the data in the Baseline and the Adaptation-Block
E1_Bline <- D[,-c(12:18)] %>% filter(V1 == "Baseline")
E1_Adapt <- D %>% filter(V1 == "Antwort")
#[2] Rename Variables
names(E1_Bline) <- c("Participant", "Date", "Experiment","Block", "Duration", "SpID", "Word", "tML", "SpSex", "Resp","RT" )
names(E1_Adapt) <- c("Participant", "Date", "Experiment", "Block", "Duration", "SpID", "Word", "tML", "SpSex","TopUp", "y", "z", "TopupM", "TopupF", "Resp", "RT", "AdaptType", "Blockorder" )
#[3] Adjust some settings of variables
E1_Bline$Resp <- as.numeric(E1_Bline$Resp)
E1_Adapt$Resp <- as.numeric(E1_Adapt$Resp)
#---------------------------------------------------------------------------------
#Check if everything is loaded correctly
#[1] N different stimuli per participant
table(E1_Bline$Participant) #should be 112 per participant
table(E1_Adapt$Subject) #should be 224 per participant
#[2]Is every stimulus picked exactly once? - Baseline
#code a stimulus variable
E1_Bline$Stimulus <- str_c(E1_Bline$SpID, E1_Bline$Word, E1_Bline$tML, sep = "_")
table(table(E1_Bline$Stimulus, E1_Bline$Participant)) #should give out only "1"s
#[3]Is every stimulus picked exactly twice? - Adaptation
E1_Adapt$Stimulus <- str_c(E1_Adapt$SpID, E1_Adapt$Word, E1_Adapt$tML, sep = "_")
table(table(E1_Adapt$Stimulus, E1_Adapt$Participant)) # pass
#sort out all the counting variables responsible for the top-up E1_Adaptation:
E1_Adapr$y <- ifelse(E1_Adapr$TopUp != 0, NA, E1_Adapr$y)
E1_Adapr$z <- ifelse(E1_Adapr$TopUp != 0, NA, E1_Adapr$z)
#sort out all the counting variables responsible for the top-up E1_Adaptation:
E1_Adapt$y <- ifelse(E1_Adapt$TopUp != 0, NA, E1_Adapt$y)
E1_Adapt$z <- ifelse(E1_Adapt$TopUp != 0, NA, E1_Adapt$z)
E1_Adapt$TopupM <- ifelse(E1_Adapt$TopUp != 0, NA, E1_Adapt$TopupM)
E1_Adapt$TopupF <- ifelse(E1_Adapt$TopUp != 0, NA, E1_Adapt$TopupF)
E1_Adapr$TopUp <- ifelse(E1_Adapr$TopUp == 0, "Yes", NA) #Code if this was a TopUp Trial
E1_Adapt$TopUp <- ifelse(E1_Adapt$TopUp == 0, "Yes", NA) #Code if this was a TopUp Trial
view(E1_Adapr)
#recode the Response for both datasets
E1_Adapt$Resp <- E1_Adapt$Resp -1 # umkodieren
#recode the Response for both datasets
E1_Bline$Resp <- E1_Bline$Resp -1 # umkodieren
E1_Adapt$Resp <- E1_Adapt$Resp -1 # umkodieren
##########################################################################
## File: 01_Exp1_data_preparation.R
## Data Preparatation for Exp 1: Adaptation of Emotion - male/female voices
# author: Christine Nussbaum/Dorothea Berges
# date 05/2024
# clear directory
rm(list=ls())
#set working directory to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/raw/")
#number of participants
print(paste("There are currently", length(unique(D$Subject)), "participants loaded."))
#reorder columns - Subject Variablen zuerst
D <- D[,c(18,17,16, 1:15)]
#---------------------------------------------------------------------------------
#Data preparation
#[1] Split the data in the Baseline and the Adaptation-Block
E1_Bline <- D[,-c(12:18)] %>% filter(V1 == "Baseline")
E1_Adapt <- D %>% filter(V1 == "Antwort")
#[2] Rename Variables
names(E1_Bline) <- c("Participant", "Date", "Experiment","Block", "Duration", "SpID", "Word", "tML", "SpSex", "Resp","RT" )
names(E1_Adapt) <- c("Participant", "Date", "Experiment", "Block", "Duration", "SpID", "Word", "tML", "SpSex","TopUp", "y", "z", "TopupM", "TopupF", "Resp", "RT", "AdaptType", "Blockorder" )
#[3] Adjust some settings of variables
E1_Bline$Resp <- as.numeric(E1_Bline$Resp)
E1_Adapt$Resp <- as.numeric(E1_Adapt$Resp)
#sort out all the counting variables responsible for the top-up E1_Adaptation:
E1_Adapt$y <- ifelse(E1_Adapt$TopUp != 0, NA, E1_Adapt$y)
E1_Adapt$z <- ifelse(E1_Adapt$TopUp != 0, NA, E1_Adapt$z)
E1_Adapt$TopupM <- ifelse(E1_Adapt$TopUp != 0, NA, E1_Adapt$TopupM)
E1_Adapt$TopupF <- ifelse(E1_Adapt$TopUp != 0, NA, E1_Adapt$TopupF)
E1_Adapt$TopUp <- ifelse(E1_Adapt$TopUp == 0, "Yes", NA) #Code if this was a TopUp Trial
#recode the Response for both datasets
E1_Bline$Resp <- E1_Bline$Resp -1 # umkodieren
E1_Adapt$Resp <- E1_Adapt$Resp -1 # umkodieren
#---------------------------------------------------------------------------------
#Check if everything is loaded correctly
#[1] N different stimuli per participant
table(E1_Bline$Participant) #should be 112 per participant
table(E1_Adapt$Subject) #should be 224 per participant
#[2]Is every stimulus picked exactly once? - Baseline
#code a stimulus variable
E1_Bline$Stimulus <- str_c(E1_Bline$SpID, E1_Bline$Word, E1_Bline$tML, sep = "_")
table(table(E1_Bline$Stimulus, E1_Bline$Participant)) #should give out only "1"s
#[3]Is every stimulus picked exactly twice? - Adaptation
E1_Adapt$Stimulus <- str_c(E1_Adapt$SpID, E1_Adapt$Word, E1_Adapt$tML, sep = "_")
table(table(E1_Adapt$Stimulus, E1_Adapt$Participant)) #should give out only "2"s
#---------------------------------------------------------------------------------
#Save datasets
save(E1_Bline, E1_Adapt, file ="input/Exp1_raw_data.RData")
