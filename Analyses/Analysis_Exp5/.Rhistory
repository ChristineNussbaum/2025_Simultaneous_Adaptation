rm(Age, range, sex, language, LStudyWork, LHearingKown, LHearingKind, LHearingImp, duration)
##########################################################################
## File: 01_Exp4_sample_information.R
## This script gives me an overview of the sample in Exp4
# author: Christine Nussbaum
# date 03/2025
# clear directory
rm(list=ls())
#set working directory to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the preprocessed data:
#S data
load(file="input/Exp4_Survey.RData")
## Meaning of Variables
#ToDo
#------------------------------------------------------------------------------------------------------------------#
#                                           Sample Demographics                                                    #
#------------------------------------------------------------------------------------------------------------------#
#general demographics
Age <- mySummary(S4, LAge)
range <- S4 %>% summarise(range(LAge))
sex <- table(S4$LSex)
language <- table(S4$LMotherLanguage)
LStudyWork <- table(S4$LStudyWork)
LHearingKown <- table(S4$LHearingKown)
LHearingKind <- table(S4$LHearingKind)
LHearingImp <- table(S4$LHearingImp)
duration <- S4 %>% summarise(Tmean = mean(TIME_total),
min = min(TIME_total),
max = max(TIME_total))
capture.output(as.matrix(Age), as.matrix(range), sex, language,
LStudyWork, LHearingKown, LHearingKind, LHearingImp, as.matrix(duration),
file="output/Exp4_demographics.txt")
rm(Age, range, sex, language, LStudyWork, LHearingKown, LHearingKind, LHearingImp, duration)
## comments
write.csv(data.frame(S4$participant, S4$VPN_Code, S4$Anmerkungen, S4$InstructionsClear, S4$Strategy), file="output/Exp4_comments.txt")
## End of Script
View(S4)
##########################################################################
## File: 00_Exp4_data_preparation.R
## Data Preparatation for Exp 4: manipulation check for identity matching
# author: Christine Nussbaum
# date 03/2024
# R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library(tidyverse)
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#laden der Rohdaten (dazu haben wir eine eigene Funktion geschrieben, die das macht)
E4 <- loadPTKExperimentData(relDirPath = "input/raw/")
#wieviele sind gelasen:
print(paste("There are currently", length(unique(E4$Participant)), "participants loaded."))
#---------------------------------------------------------------------------------
# Data preparation
#[1] Rename Variables
names(E4) <- c("File1", "tDur1", "File2", "tDur2", "Ident", "Word", "SpSex",
"Dataset", "X", "Key", "RT", "ACC", "Blockorder", "Experiment",
"Date", "Participant")
#[2] code same or different
E4$Cond <- ifelse(E4$Ident %in% c("nf01-01", "nf03-03", "nm03-03", "nm04-04",
"TL12-TL12", "WK01-WK01", "JW07-JW07", "HO05-HO05"),
"same", "diff")
unique(E4$Ident)
table(E4$Ident, E4$Cond)
#recode the Response for both datasets
E4$ACC <- ifelse(E4$ACC == 1, 1, 0)
#---------------------------------------------------------------------------------
#Check if some participants only pressed one key during a whole block
# if so -> remove
Check_E4 <- E4 %>% group_by(Participant) %>% summarise(var = var(Key)) # no one
# no one has to be removed here
rm(Check_E4)
#but this was my test dataset:
E4 <- E4 %>% filter(Participant != "e436e90b")
##########################################################################
## File: 00_Exp4_data_preparation.R
## Data Preparatation for Exp 4: manipulation check for identity matching
# author: Christine Nussbaum
# date 03/2024
# R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library(tidyverse)
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#laden der Rohdaten (dazu haben wir eine eigene Funktion geschrieben, die das macht)
E4 <- loadPTKExperimentData(relDirPath = "input/raw/")
#wieviele sind gelasen:
print(paste("There are currently", length(unique(E4$Participant)), "participants loaded."))
#---------------------------------------------------------------------------------
# Data preparation
#[1] Rename Variables
names(E4) <- c("File1", "tDur1", "File2", "tDur2", "Ident", "Word", "SpSex",
"Dataset", "X", "Key", "RT", "ACC", "Blockorder", "Experiment",
"Date", "Participant")
#[2] code same or different
E4$Cond <- ifelse(E4$Ident %in% c("nf01-01", "nf03-03", "nm03-03", "nm04-04",
"TL12-TL12", "WK01-WK01", "JW07-JW07", "HO05-HO05"),
"same", "diff")
unique(E4$Ident)
table(E4$Ident, E4$Cond)
#recode the Response for both datasets
E4$ACC <- ifelse(E4$ACC == 1, 1, 0)
#---------------------------------------------------------------------------------
#Check if some participants only pressed one key during a whole block
# if so -> remove
Check_E4 <- E4 %>% group_by(Participant) %>% summarise(var = var(Key)) # no one
# no one has to be removed here
rm(Check_E4)
#but this was my test dataset:
E4 <- E4 %>% filter(Participant != "e436e90b")
##########################################################################
## File: 00_Exp4_data_preparation.R
## Data Preparatation for Exp 4: manipulation check for identity matching
# author: Christine Nussbaum
# date 03/2024
# R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library(tidyverse)
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#laden der Rohdaten (dazu haben wir eine eigene Funktion geschrieben, die das macht)
E4 <- loadPTKExperimentData(relDirPath = "input/raw/")
#wieviele sind gelasen:
print(paste("There are currently", length(unique(E4$Participant)), "participants loaded."))
#---------------------------------------------------------------------------------
# Data preparation
#[1] Rename Variables
names(E4) <- c("File1", "tDur1", "File2", "tDur2", "Ident", "Word", "SpSex",
"Dataset", "X", "Key", "RT", "ACC", "Blockorder", "Experiment",
"Date", "Participant")
#[2] code same or different
E4$Cond <- ifelse(E4$Ident %in% c("nf01-01", "nf03-03", "nm03-03", "nm04-04",
"TL12-TL12", "WK01-WK01", "JW07-JW07", "HO05-HO05"),
"same", "diff")
unique(E4$Ident)
table(E4$Ident, E4$Cond)
#recode the Response for both datasets
E4$ACC <- ifelse(E4$ACC == 1, 1, 0)
#---------------------------------------------------------------------------------
#Check if some participants only pressed one key during a whole block
# if so -> remove
Check_E4 <- E4 %>% group_by(Participant) %>% summarise(var = var(Key)) # no one
# no one has to be removed here
rm(Check_E4)
#but this was my test dataset:
E4 <- E4 %>% filter(Participant != "e436e90b")
#------------------------------------------
# calculate Signal detection Parameters:
#[1]
# Remember that Hits and Misses are only defined for Same Trials
# Correct Rejections and False Alarms are only defined for Different Trials
# This is why we put NAs (=not defined) in the other cells respectively
# Hits
E4$H <- with(E4, ifelse(Cond=="same" & ACC ==1, 1,0))
E4$H <- with(E4, ifelse(Cond=="diff",  NA, E4$H))
# Misses
E4$M <- with(E4, ifelse(Cond=="same" & ACC ==0,1,0))
E4$M <- with(E4, ifelse(Cond=="diff",  NA, E4$M))
# Correct Rejections
E4$CR <- with(E4, ifelse(Cond=="diff" & ACC ==1  ,1,0))
E4$CR <- with(E4, ifelse(Cond=="same",  NA, E4$CR))
# False Alarms
E4$FA <- with(E4, ifelse(Cond=="diff"& ACC ==0  ,1,0))
E4$FA <- with(E4, ifelse(Cond=="same",  NA, E4$FA))
# checking
table(E4$H,E4$M)
table(E4$CR,E4$FA)
#[2] aggregrate for Signal detection parameters
##aggregate across:
E4_same <- E4[E4$Cond == "same",] %>% group_by(Participant, Dataset, SpSex) %>% summarise(H = mean(H, na.rm= TRUE),
M = mean(M, na.rm= TRUE),
N= length(RT))
E4_diff <- E4[E4$Cond == "diff",] %>% group_by(Participant, Dataset, SpSex) %>% summarise(CR = mean(CR, na.rm= TRUE),
FA = mean(FA, na.rm= TRUE),
N= length(RT))
E4_signal <- merge(E4_same, E4_diff)
rm(E4_same, E4_diff)
#[3]
####  calculate the z parameters
#correction for values of 0 and 1
E4_signal$H <- ifelse(E4_signal$H == 1, (90-0.5)/90, E4_signal$H)
E4_signal$H <- ifelse(E4_signal$H == 0, 0.5/90, E4_signal$H)
E4_signal$FA <- ifelse(E4_signal$FA == 0, 0.5/90, E4_signal$FA)
E4_signal$FA <- ifelse(E4_signal$FA == 1, (90-0.5)/90, E4_signal$FA)
# calculation of z-values
# help: dnorm, qnorm, pnorm, rnorm
E4_signal$Hz <- qnorm(E4_signal$H)
E4_signal$FAz <- qnorm(E4_signal$FA)
#[4]
#calculate d-prime and criterion
#d-prime
E4_signal$dprime <- E4_signal$Hz - E4_signal$FAz
#criterion
E4_signal$crit <- (-0.5*(E4_signal$Hz + E4_signal$FAz))
#speichern aller DatensÃ¤tze:
save(E4, file="input/Exp4_raw_data.RData")
save(E4_signal, file="input/E4_signal_detection.RData")
rm(E4_signal)
##################################################################################
##################################################################################
##################################################################################
#---------------------------------------------------------------------------------
# survey data preparation
#load raw survey data
S4 <- read.csv(file ="input/data_Exp4.csv")
#rename participant
S4$participant <- substr(S4$participant, 31,38)
#keep only the ones with an experimental file
S4 <- S4 %>% filter(participant %in% unique(E4$Participant)) # check: N = 36
S4$VPN_Code <- paste0(S4$LPartCode_1, S4$LPartCode_2, S4$LPartCode_3, S4$LPartCode_4, S4$LPartCode_5, S4$LPartCode_6)
#rename a few variables
S4 <- S4 %>% select(!c(intro_question1_1,
TIME_start,
TIME_end,
CLIENT_start,
LPartCode_1,
LPartCode_2,
LPartCode_3,
LPartCode_4,
LPartCode_5,
LPartCode_6,
StartRatingExperiment_1)) %>%
rename(LAge = LAge_1,
LSex = LSex_1,
LMotherLanguage = LMotherLanguage_1,
LStudyWork = LStudyWork_1,
LHearingKown = LHearingDisabilitiesKnown_1,
LHearingKind = LHearingDisabilitiesKind_1,
LHearingImp = LHearingDisabilitiesConstraint_1,
Anmerkungen = Anmerkungen_1,
InstructionsClear = afterExp2InstructionsClear_1,
Strategy = afterExp4Strategy_1)
#save survey
save(S4, file="input/Exp4_survey.RData")
## End of Script
##########################################################################
## File: 01_Exp4_sample_information.R
## This script gives me an overview of the sample in Exp4
# author: Christine Nussbaum
# date 03/2025
# clear directory
rm(list=ls())
#set working directory to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the preprocessed data:
#S data
load(file="input/Exp4_Survey.RData")
## Meaning of Variables
#ToDo
#------------------------------------------------------------------------------------------------------------------#
#                                           Sample Demographics                                                    #
#------------------------------------------------------------------------------------------------------------------#
#general demographics
Age <- mySummary(S4, LAge)
range <- S4 %>% summarise(range(LAge))
sex <- table(S4$LSex)
language <- table(S4$LMotherLanguage)
LStudyWork <- table(S4$LStudyWork)
LHearingKown <- table(S4$LHearingKown)
LHearingKind <- table(S4$LHearingKind)
LHearingImp <- table(S4$LHearingImp)
duration <- S4 %>% summarise(Tmean = mean(TIME_total),
min = min(TIME_total),
max = max(TIME_total))
capture.output(as.matrix(Age), as.matrix(range), sex, language,
LStudyWork, LHearingKown, LHearingKind, LHearingImp, as.matrix(duration),
file="output/Exp4_demographics.txt")
rm(Age, range, sex, language, LStudyWork, LHearingKown, LHearingKind, LHearingImp, duration)
## comments
write.csv(data.frame(S4$participant, S4$VPN_Code, S4$Anmerkungen, S4$InstructionsClear, S4$Strategy), file="output/Exp4_comments.txt")
## End of Script
# clear directory
rm(list=ls())
#set working directory to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/raw/")
View(D)
View(loadPTKExperimentData)
#---------------------------------------------------------------------------------
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/raw/")
View(D)
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/raw/")
View(D)
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/raw/")
View(D)
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/raw/")
View(D)
#number of participants
print(paste("There are currently", length(unique(D$Subject)), "participants loaded."))
#reorder columns - Subject Variablen zuerst
D <- D[,c(17,16,15, 1:14)]
E5_Bline <- D[,-c(12:17)] %>% filter(V1 == "Baseline")
E5_Adapt <- D %>% filter(V1 == "Antwort")
#[2] Rename Variables
names(E5_Bline) <- c("Participant", "Date", "Experiment","Block", "Duration", "SpID", "Word", "tML", "SpSex", "Resp","RT" )
names(E5_Adapt) <- c("Participant", "Date", "Experiment", "Block", "Duration", "SpID", "Word", "tML", "SpSex", "Resp", "RT", "AdaptType", "Blockorder", "TopUp", "z", "TopupM", "TopupF")
#[3] Adjust some settings of variables
E5_Bline$Resp <- as.numeric(E5_Bline$Resp)
E5_Adapt$Resp <- as.numeric(E5_Adapt$Resp)
#sort out all the counting variables responsible for the top-up E5_Adaptation:
E5_Adapt$z <- ifelse(E5_Adapt$TopUp != 0, NA, E5_Adapt$z)
E5_Adapt$TopupM <- ifelse(E5_Adapt$TopUp != 0, NA, E5_Adapt$TopupM)
E5_Adapt$TopupF <- ifelse(E5_Adapt$TopUp != 0, NA, E5_Adapt$TopupF)
E5_Adapt$TopUp <- ifelse(E5_Adapt$TopUp == 0, "Yes", NA) #Code if this was a TopUp Trial
#recode the Response for both datasets
E5_Bline$Resp <- E5_Bline$Resp -1 # umkodieren
E5_Adapt$Resp <- E5_Adapt$Resp -1 # umkodieren
View(E5_Adapt)
unique(E5_Adapt$AdaptType)
#recode AdaptType
E5_Adapt$AdaptType <- recode(E5_Adapt$AdaptType,
"HO05_angry/JW07_fearful" = "f1_ang/f2_fea",
"JW07_angry/HO05_fearful" = "f1_fea/f2_ang",
"TL12_angry/WK01_fearful" = "m3_ang/m4_fea",
"WK01_angry/TL12_fearful" = "m3_fea/m4_ang")
unique(E5_Adapt$AdaptType)
#[1] N different stimuli per participant
table(E5_Bline$Participant) #should be 112 per participant
table(E5_Adapt$Participant) #should be 224 per participant
#code a stimulus variable
E5_Bline$Stimulus <- str_c(E5_Bline$SpID, E5_Bline$Word, E5_Bline$tML, sep = "_")
table(table(E5_Bline$Stimulus, E5_Bline$Participant)) #should give out only "1"s
#[3]Is every stimulus picked exactly twice? - Adaptation
E5_Adapt$Stimulus <- str_c(E5_Adapt$SpID, E5_Adapt$Word, E5_Adapt$tML, sep = "_")
table(table(E5_Adapt$Stimulus, E5_Adapt$Participant)) #should give out only "2"s
Check_Bline <- E5_Bline %>% group_by(Participant) %>% summarise(var = var(Resp)) # no one
Check_Adapt <- E5_Adapt %>% group_by(Participant) %>% summarise(var = var(Resp)) # no one
View(Check_Adapt)
View(Check_Bline)
rm(Check_Bline, Check_Adapt)
#---------------------------------------------------------------------------------
#Save datasets
save(E5_Bline, E5_Adapt, file ="input/Exp5_raw_data.RData")
#load raw survey data
S5 <- read.csv(file ="input/data_Exp5.csv")
#rename participant
S5$participant <- substr(S5$participant, 31,38)
#keep only the ones with an experimental file
S5 <- S5 %>% filter(participant %in% unique(E5_Adapt$Participant)) # check: N = 44
S5$VPN_Code <- paste0(S5$LPartCode_1, S5$LPartCode_2, S5$LPartCode_3, S5$LPartCode_4, S5$LPartCode_5, S5$LPartCode_6)
#rename a few variables
S5 <- S5 %>% select(!c(intro_question1_1,
TIME_start,
TIME_end,
CLIENT_start,
LPartCode_1,
LPartCode_2,
LPartCode_3,
LPartCode_4,
LPartCode_5,
LPartCode_6,
StartRatingExperiment_1)) %>%
rename(LAge = LAge_1,
LSex = LSex_1,
LMotherLanguage = LMotherLanguage_1,
LStudyWork = LStudyWork_1,
LHearingKown = LHearingDisabilitiesKnown_1,
LHearingKind = LHearingDisabilitiesKind_1,
LHearingImp = LHearingDisabilitiesConstraint_1,
Anmerkungen = Anmerkungen_1,
InstructionsClear = afterExp5InstructionsClear_1,
Strategy = afterExp4Strategy_1,
Eval1 = afterExp3RatingEvaluation_1,
Eval2 = afterExp3RatingEvaluation_2,
Eval3 = afterExp3RatingEvaluation_3,
Eval4 = afterExp3RatingEvaluation_4,
Eval5 = afterExp3RatingEvaluation_5,
Eval6 = afterExp3RatingEvaluation_6,
Eval7 = afterExp3RatingEvaluation_7,
Eval8 = afterExp3RatingEvaluation_8)
#rename a few variables
S5 <- S5 %>% select(!c(intro_question1_1,
TIME_start,
TIME_end,
CLIENT_start,
LPartCode_1,
LPartCode_2,
LPartCode_3,
LPartCode_4,
LPartCode_5,
LPartCode_6,
StartRatingExperiment_1)) %>%
rename(LAge = LAge_1,
LSex = LSex_1,
LMotherLanguage = LMotherLanguage_1,
LStudyWork = LStudyWork_1,
LHearingKown = LHearingDisabilitiesKnown_1,
LHearingKind = LHearingDisabilitiesKind_1,
LHearingImp = LHearingDisabilitiesConstraint_1,
Anmerkungen = Anmerkungen_1,
InstructionsClear = afterExp2InstructionsClear_1,
Strategy = afterExp4Strategy_1,
Eval1 = afterExp3RatingEvaluation_1,
Eval2 = afterExp3RatingEvaluation_2,
Eval3 = afterExp3RatingEvaluation_3,
Eval4 = afterExp3RatingEvaluation_4,
Eval5 = afterExp3RatingEvaluation_5,
Eval6 = afterExp3RatingEvaluation_6,
Eval7 = afterExp3RatingEvaluation_7,
Eval8 = afterExp3RatingEvaluation_8)
#save survey
save(S5, file="input/Exp5_survey.RData")
# clear directory
rm(list=ls())
#set working directory to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#get the preprocessed data:
#S data
load(file="input/Exp5_Survey.RData")
## Meaning of Variables
#ToDo
#general demographics
Age <- mySummary(S5, LAge)
range <- S5 %>% summarise(range(LAge))
sex <- table(S5$LSex)
language <- table(S5$LMotherLanguage)
LStudyWork <- table(S5$LStudyWork)
LHearingKown <- table(S5$LHearingKown)
LHearingKind <- table(S5$LHearingKind)
LHearingImp <- table(S5$LHearingImp)
duration <- S5 %>% summarise(Tmean = mean(TIME_total, na.rm= TRUE),
min = min(TIME_total, na.rm= TRUE),
max = max(TIME_total, na.rm= TRUE))
capture.output(as.matrix(Age), as.matrix(range), sex, language,
LStudyWork, LHearingKown, LHearingKind, LHearingImp, as.matrix(duration),
file="output/Exp5_demographics.txt")
rm(Age, range, sex, language, LStudyWork, LHearingKown, LHearingKind, LHearingImp, duration)
## comments
write.csv(data.frame(S5$participant, S5$VPN_Code, S5$Anmerkungen, S5$InstructionsClear, S5$Strategy), file="output/Exp5_comments.txt")
# after Exp-Evaluation
Eval1 <- table(S5$Eval1)
Eval2 <- table(S5$Eval2)
Eval3 <- table(S5$Eval3)
Eval4 <- table(S5$Eval4)
Eval5 <- table(S5$Eval5)
Eval6 <- table(S5$Eval6)
Eval7 <- table(S5$Eval7)
Eval8 <- table(S5$Eval8)
label <- c("Im Alltag achte ich stets auf den Klang der Stimme einer Person.",
"Es fiel mir Ã¤uÃerst schwer, die Stimmen zu bewerten.",
"Bei den meisten Stimmen hatte ich gar keine Ahnung, was ich dr?cken sollte.",
"Ich habe die ganze Zeit aufmerksam zugehÃ¶rt.",
"Oft habe ich einfach irgendetwas geklickt.",
"Ich fand dieses HÃ¶rexperiment Ã¤uÃerst interessant.",
"Ich habe in jedem Durchgang versucht, die Bewertung so gut wie mÃ¶glich zu machen.",
"Ich achte normalerweise gar nicht auf die Stimmen von Personen.")
capture.output(label[1], Eval1, label[2],Eval2, label[3],Eval3,label[4], Eval4, label[5],Eval5, label[6], Eval6,label[7], Eval7, label[8], Eval8,file="output/Exp5_after_experiment_evaluation.txt")
rm(label, Eval1, Eval2, Eval3, Eval4, Eval5, Eval6, Eval7, Eval8)
## End of Script
View(S5)
